(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{910:function(e,t,v){"use strict";v.r(t);var _=v(12),s=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"redis快速入门及使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis快速入门及使用"}},[e._v("#")]),e._v(" Redis快速入门及使用")]),e._v(" "),v("h2",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),v("p",[e._v("redis是一种支持分布式的nosql数据库,他的数据是保存在内存中，同时redis可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比memcached支持更多的数据结构(string,list列表[队列和栈],set[集合],sorted set[有序集合],hash(hash表))。")]),e._v(" "),v("p",[e._v("redis文档："),v("a",{attrs:{href:"http://redisdoc.com/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redisdoc.com/index.html"),v("OutboundLink")],1)]),e._v(" "),v("h2",{attrs:{id:"redis使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis使用场景"}},[e._v("#")]),e._v(" Redis使用场景")]),e._v(" "),v("ul",[v("li",[e._v("登录会话存储：存储在redis中，与memcached相比，数据不会丢失。")]),e._v(" "),v("li",[e._v("排行版/计数器：比如一些秀场类的项目，经常会有一些前多少名的主播排名。还有一些文章阅读量的技术，或者新浪微博的点赞数等。")]),e._v(" "),v("li",[e._v("作为消息队列：比如celery就是使用redis作为中间人。")]),e._v(" "),v("li",[e._v("当前在线人数：当前系统有多少在线人数。")]),e._v(" "),v("li",[e._v("一些常用的数据缓存：比如我们的BBS论坛，板块不会经常变化的，但是每次访问首页都要从mysql中获取，可以在redis中缓存起来，不用每次请求数据库。")]),e._v(" "),v("li",[e._v("把前200篇文章缓存或者评论缓存：一般用户浏览网站，只会浏览前面一部分文章或者评论，那么可以把前面200篇文章和对应的评论缓存起来。用户访问超过的，就访问数据库，并且以后文章超过200篇，则把之前的文章删除。")]),e._v(" "),v("li",[e._v("好友关系：微博的好友关系使用redis实现。")]),e._v(" "),v("li",[e._v("发布和订阅功能：可以用来做聊天软件。")])]),e._v(" "),v("h2",{attrs:{id:"redis和memcached的比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis和memcached的比较"}},[e._v("#")]),e._v(" Redis和Memcached的比较")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}}),e._v(" "),v("th",{staticStyle:{"text-align":"left"}},[e._v("Memcached")]),e._v(" "),v("th",{staticStyle:{"text-align":"left"}},[e._v("Redis")])])]),e._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("类型")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("纯内存数据库")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("内存磁盘同步数据库")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("数据类型")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("在定义value时就要固定数据类型")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("不需要")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("虚拟内存")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("不支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("支持")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("过期策略")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("支持")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("存储数据安全")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("不支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("可以将数据同步到dump.db中")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("灾难恢复")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("不支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("可以将磁盘中的数据恢复到内存中")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("分布式")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("主从同步")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("订阅与发布")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("不支持")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("支持")])])])]),e._v(" "),v("h2",{attrs:{id:"redis在windows系统中的安装与启动"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis在windows系统中的安装与启动"}},[e._v("#")]),e._v(" Redis在windows系统中的安装与启动")]),e._v(" "),v("ul",[v("li",[e._v("下载：redis官方是不支持windows操作系统的，但是微软的开源部门将redis移植到了windows上，因此下载地址不是在redis官网上，而是在github上："),v("a",{attrs:{href:"https://github.com/MicrosoftArchive/redis/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/MicrosoftArchive/redis/releases"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("安装：点击一顿下一步安装就可以了")]),e._v(" "),v("li",[e._v("运行：进入到redis安装所在的路径然后执行"),v("code",[e._v("redis-server.exe redis.windows.conf")]),e._v("就可以运行了")]),e._v(" "),v("li",[e._v("连接：redis和mysql以及mongo是一样的，都提供了一个客户端进行连接。输入命令redis-cli（前提是redis安装路径已经加入到环境变量中了）就可以连接到redis服务器了")])]),e._v(" "),v("h2",{attrs:{id:"redis在ubuntu系统中的安装与启动"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis在ubuntu系统中的安装与启动"}},[e._v("#")]),e._v(" Redis在ubuntu系统中的安装与启动")]),e._v(" "),v("ul",[v("li",[e._v("安装："),v("code",[e._v("sudo apt-get install redis-server")])]),e._v(" "),v("li",[e._v("卸载："),v("code",[e._v("sudo apt-get purge --auto-remove redis-server")])]),e._v(" "),v("li",[e._v("启动：redis安装后，默认会自动启动，可以通过以下命令查看："),v("code",[e._v("ps aux|grep redis")])]),e._v(" "),v("li",[e._v("如果想自己手动启动，可以通过以下命令进行启动："),v("code",[e._v("sudo service redis-server start")])]),e._v(" "),v("li",[e._v("停止："),v("code",[e._v("sudo service redis-server stop")])])]),e._v(" "),v("h2",{attrs:{id:"redis服务器允许其它机器访问"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis服务器允许其它机器访问"}},[e._v("#")]),e._v(" Redis服务器允许其它机器访问")]),e._v(" "),v("ul",[v("li",[e._v("想要让其他机器访问本机的redis服务器。那么要修改redis.conf的配置文件，将bind改成bind [自己的ip地址或者0.0.0.0]，其他机器才能访问。")]),e._v(" "),v("li",[e._v("bind绑定的是本机网卡的ip地址，而不是想让其他机器连接的ip地址。如果有多块网卡，那么可以绑定多个网卡的ip地址。如果绑定到额是0.0.0.0，那么意味着其他机器可以通过本机所有的ip地址进行访问。")])]),e._v(" "),v("h2",{attrs:{id:"对redis的操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对redis的操作"}},[e._v("#")]),e._v(" 对Redis的操作")]),e._v(" "),v("p",[e._v("操作redis可以分为两种方式，第一种是使用redis-cli，第二种就是使用编程语言对其操作， 如：.NET、Python等")]),e._v(" "),v("h3",{attrs:{id:"启动redis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#启动redis"}},[e._v("#")]),e._v(" 启动redis")]),e._v(" "),v("p",[v("code",[e._v("sudo service redis-server start")])]),e._v(" "),v("h3",{attrs:{id:"连接redis-server"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连接redis-server"}},[e._v("#")]),e._v(" 连接redis-server")]),e._v(" "),v("p",[v("code",[e._v("redis-cli -h [ip] -p [端口]")])]),e._v(" "),v("h3",{attrs:{id:"添加"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#添加"}},[e._v("#")]),e._v(" 添加")]),e._v(" "),v("p",[v("code",[e._v("set key value")]),e._v(" 如："),v("code",[e._v("set key articles")])]),e._v(" "),v("p",[e._v("将字符串值value关联到key。如果key已经持有其他值，set命令就覆写旧值，无视其类型。并且默认的过期时间是永久，即永远不会过期。")]),e._v(" "),v("h3",{attrs:{id:"删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[e._v("#")]),e._v(" 删除")]),e._v(" "),v("p",[v("code",[e._v("del key")]),e._v(" 如："),v("code",[e._v("del articles")])]),e._v(" "),v("h3",{attrs:{id:"设置过期时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设置过期时间"}},[e._v("#")]),e._v(" 设置过期时间")]),e._v(" "),v("p",[v("code",[e._v("expire key timeout(单位为秒)")])]),e._v(" "),v("p",[e._v("也可以在设置值的时候，一同指定过期时间")]),e._v(" "),v("p",[v("code",[e._v("set key value EX timeout")]),e._v(" 或："),v("code",[e._v("setex key timeout value")])]),e._v(" "),v("h3",{attrs:{id:"查看过期时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看过期时间"}},[e._v("#")]),e._v(" 查看过期时间")]),e._v(" "),v("p",[v("code",[e._v("ttl key")]),e._v(" 如："),v("code",[e._v("ttl articles")])]),e._v(" "),v("h3",{attrs:{id:"查看当前redis中的所有key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看当前redis中的所有key"}},[e._v("#")]),e._v(" 查看当前redis中的所有key")]),e._v(" "),v("p",[v("code",[e._v("keys *")])]),e._v(" "),v("h3",{attrs:{id:"列表操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表操作"}},[e._v("#")]),e._v(" 列表操作")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("在列表左边添加元素")]),e._v(" "),v("p",[v("code",[e._v("lpush key value")])]),e._v(" "),v("p",[e._v("将值value插入到列表key的表头。如果key不存在，一个空列表会被创建并执行lpush操作。当key存在但不是列表类型时，将返回一个错误")])]),e._v(" "),v("li",[v("p",[e._v("在列表右边添加元素")]),e._v(" "),v("p",[v("code",[e._v("rpush key value")])]),e._v(" "),v("p",[e._v("将值value插入到列表key的表尾。如果key不存在，一个空列表会被创建并执行RPUSH操作。当key存在但不是列表类型时，返回一个错误")])]),e._v(" "),v("li",[v("p",[e._v("查看列表中的元素")]),e._v(" "),v("p",[v("code",[e._v("lrange key start stop")])]),e._v(" "),v("p",[e._v("返回列表key中指定区间内的元素，区间以偏移量start和stop指定,如果要查看左边的第一个到最后的一个则："),v("code",[e._v("lrange key 0 -1")])])]),e._v(" "),v("li",[v("p",[e._v("移除列表中的元素")]),e._v(" "),v("ul",[v("li",[e._v("移除并返回列表key的头元素："),v("code",[e._v("lpop key")])]),e._v(" "),v("li",[e._v("移除并返回列表的尾元素："),v("code",[e._v("rpop key")])]),e._v(" "),v("li",[e._v("移除并返回列表key的中间元素："),v("code",[e._v("lrem key count value")]),e._v(" 将删除key这个列表中，count个值为value的元素")])])]),e._v(" "),v("li",[v("p",[e._v("指定返回第几个元素")]),e._v(" "),v("p",[v("code",[e._v("lindex key index")]),e._v(" 将返回key这个列表中，索引为index的这个元素")])]),e._v(" "),v("li",[v("p",[e._v("获取列表中的元素个数")]),e._v(" "),v("p",[v("code",[e._v("llen key")]),e._v(" 如："),v("code",[e._v("llen languages")])]),e._v(" "),v("p",[e._v("根据参数 count 的值，移除列表中与参数 value 相等的元素。count的值可以是以下几种")]),e._v(" "),v("ul",[v("li",[e._v("count > 0：从表头开始向表尾搜索，移除与value相等的元素，数量为count")]),e._v(" "),v("li",[e._v("count < 0：从表尾开始向表头搜索，移除与 value相等的元素，数量为count的绝对值")]),e._v(" "),v("li",[e._v("count = 0：移除表中所有与value 相等的值")])])])]),e._v(" "),v("h3",{attrs:{id:"set集合的操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set集合的操作"}},[e._v("#")]),e._v(" set集合的操作")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("添加元素")]),e._v(" "),v("p",[v("code",[e._v("sadd set value1 value2....")]),e._v(" 如："),v("code",[e._v("sadd team web app")])])]),e._v(" "),v("li",[v("p",[e._v("查看元素")]),e._v(" "),v("p",[v("code",[e._v("smembers set")]),e._v(" 如："),v("code",[e._v("smembers team")])])]),e._v(" "),v("li",[v("p",[e._v("移除元素")]),e._v(" "),v("p",[v("code",[e._v("rem set member...")]),e._v(" 如："),v("code",[e._v("srem team web app")])])]),e._v(" "),v("li",[v("p",[e._v("查看集合中的元素个数")]),e._v(" "),v("p",[v("code",[e._v("scard set")]),e._v(" 如："),v("code",[e._v("scard team1")])])]),e._v(" "),v("li",[v("p",[e._v("获取多个集合的交集")]),e._v(" "),v("p",[v("code",[e._v("sinter set1 set2")]),e._v(" 如："),v("code",[e._v("sinter team1 team2")])])]),e._v(" "),v("li",[v("p",[e._v("获取多个集合的并集")]),e._v(" "),v("p",[v("code",[e._v("sunion set1 set2")]),e._v(" 如："),v("code",[e._v("sunion team1 team2")])])]),e._v(" "),v("li",[v("p",[e._v("获取多个集合的差集")]),e._v(" "),v("p",[v("code",[e._v("sdiff set1 set2")]),e._v(" 如："),v("code",[e._v("sdiff team1 team2")])])])]),e._v(" "),v("h3",{attrs:{id:"hash哈希操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hash哈希操作"}},[e._v("#")]),e._v(" hash哈希操作")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("添加一个新值")]),e._v(" "),v("p",[v("code",[e._v("hset key field value")]),e._v(" 如："),v("code",[e._v("hset website baidu baidu.com")])]),e._v(" "),v("p",[e._v("将哈希表key中的域field的值设为value，如果key不存在，一个新的哈希表被创建并进行 HSET操作。如果域 field已经存在于哈希表中，旧值将被覆盖。")])]),e._v(" "),v("li",[v("p",[e._v("获取哈希中的field对应的值")]),e._v(" "),v("p",[v("code",[e._v("hget key field")]),e._v(" 如："),v("code",[e._v("hget website baidu")])])]),e._v(" "),v("li",[v("p",[e._v("删除field中的某个field")]),e._v(" "),v("p",[v("code",[e._v("hdel key field")]),e._v(" 如："),v("code",[e._v("hdel website baidu")])])]),e._v(" "),v("li",[v("p",[e._v("获取某个哈希中所有的field和value")]),e._v(" "),v("p",[v("code",[e._v("hgetall key")]),e._v(" 如："),v("code",[e._v("hgetall website")])])]),e._v(" "),v("li",[v("p",[e._v("获取某个哈希中所有的field")]),e._v(" "),v("p",[v("code",[e._v("hkeys key")]),e._v(" 如："),v("code",[e._v("hkeys website")])])]),e._v(" "),v("li",[v("p",[e._v("获取某个哈希中所有的值")]),e._v(" "),v("p",[v("code",[e._v("hvals key")]),e._v(" 如："),v("code",[e._v("hvals website")])])]),e._v(" "),v("li",[v("p",[e._v("判断哈希中是否存在某个field")]),e._v(" "),v("p",[v("code",[e._v("hexists key field")]),e._v(" 如："),v("code",[e._v("hexists website baidu")])])]),e._v(" "),v("li",[v("p",[e._v("获取哈希中总共的键值对")])])]),e._v(" "),v("p",[v("code",[e._v("hlen field")]),e._v(" 如："),v("code",[e._v("hlen website")])]),e._v(" "),v("h3",{attrs:{id:"事务操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务操作"}},[e._v("#")]),e._v(" 事务操作")]),e._v(" "),v("p",[e._v("Redis事务可以一次执行多个命令，事务具有以下特征")]),e._v(" "),v("ul",[v("li",[e._v("隔离操作：事务中的所有命令都会序列化、按顺序地执行，不会被其他命令打扰")]),e._v(" "),v("li",[e._v("原子操作：事务中的命令要么全部被执行，要么全部都不执行")]),e._v(" "),v("li",[e._v("开启一个事务："),v("code",[e._v("multi")]),e._v("，以后执行的所有命令，都在这个事务中执行的")]),e._v(" "),v("li",[e._v("执行事务："),v("code",[e._v("exec")]),e._v("，会将在"),v("code",[e._v("multi")]),e._v("和"),v("code",[e._v("exec")]),e._v("中的操作一并提交")]),e._v(" "),v("li",[e._v("取消事务："),v("code",[e._v("discard")]),e._v("，会将"),v("code",[e._v("multi")]),e._v("后的所有命令取消")]),e._v(" "),v("li",[e._v("监视一个或者多个key："),v("code",[e._v("watch key...")]),e._v("，监视一个(或多个)key，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断")]),e._v(" "),v("li",[e._v("取消所有key的监视："),v("code",[e._v("unwatch")])])]),e._v(" "),v("h3",{attrs:{id:"发布-订阅操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅操作"}},[e._v("#")]),e._v(" 发布/订阅操作")]),e._v(" "),v("ul",[v("li",[e._v("给某个频道发布消息："),v("code",[e._v("publish channel message")])]),e._v(" "),v("li",[e._v("订阅某个频道的消息："),v("code",[e._v("subscribe channel")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);