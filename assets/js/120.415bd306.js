(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{724:function(a,s,t){"use strict";t.r(s);var r=t(2),e=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"常见问题总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题总结"}},[a._v("#")]),a._v(" 常见问题总结")]),a._v(" "),s("h2",{attrs:{id:"镜像相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像相关"}},[a._v("#")]),a._v(" 镜像相关")]),a._v(" "),s("h3",{attrs:{id:"如何批量清理临时镜像文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何批量清理临时镜像文件"}},[a._v("#")]),a._v(" 如何批量清理临时镜像文件")]),a._v(" "),s("p",[a._v("答：可以使用 "),s("code",[a._v("docker image prune")]),a._v(" 命令。")]),a._v(" "),s("h3",{attrs:{id:"如何查看镜像支持的环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何查看镜像支持的环境变量"}},[a._v("#")]),a._v(" 如何查看镜像支持的环境变量")]),a._v(" "),s("p",[a._v("答：可以使用 "),s("code",[a._v("docker run IMAGE env")]),a._v(" 命令。")]),a._v(" "),s("h3",{attrs:{id:"本地的镜像文件都存放在哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地的镜像文件都存放在哪里"}},[a._v("#")]),a._v(" 本地的镜像文件都存放在哪里")]),a._v(" "),s("p",[a._v("答：与 Docker 相关的本地资源默认存放在 "),s("code",[a._v("/var/lib/docker/")]),a._v(" 目录下，以 "),s("code",[a._v("overlay2")]),a._v(" 文件系统为例，其中 "),s("code",[a._v("containers")]),a._v(" 目录存放容器信息，"),s("code",[a._v("image")]),a._v(" 目录存放镜像信息，"),s("code",[a._v("overlay2")]),a._v(" 目录下存放具体的镜像层文件。")]),a._v(" "),s("h3",{attrs:{id:"构建-docker-镜像应该遵循哪些原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建-docker-镜像应该遵循哪些原则"}},[a._v("#")]),a._v(" 构建 Docker 镜像应该遵循哪些原则")]),a._v(" "),s("p",[a._v("答：整体原则上，尽量保持镜像功能的明确和内容的精简，要点包括")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择 "),s("code",[a._v("alpine")]),a._v(" 镜像，仅有不足六兆大小；")])]),a._v(" "),s("li",[s("p",[a._v("清理编译生成文件、安装包的缓存等临时文件；")])]),a._v(" "),s("li",[s("p",[a._v("安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖；")])]),a._v(" "),s("li",[s("p",[a._v("从安全角度考虑，应用要尽量使用系统的库和依赖；")])]),a._v(" "),s("li",[s("p",[a._v("如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值；")])]),a._v(" "),s("li",[s("p",[a._v("使用 Dockerfile 创建镜像时候要添加 .dockerignore 文件或使用干净的工作目录。")])])]),a._v(" "),s("p",[a._v("更多内容请查看 "),s("RouterLink",{attrs:{to:"/stack/docker/best_practices/"}},[a._v("Dockerfile 最佳实践")])],1),a._v(" "),s("h3",{attrs:{id:"碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效"}},[a._v("#")]),a._v(" 碰到网络问题，无法 pull 镜像，命令行指定 http_proxy 无效")]),a._v(" "),s("p",[a._v("答：在 Docker 配置文件中添加 "),s("code",[a._v('export http_proxy="http://<PROXY_HOST>:<PROXY_PORT>"')]),a._v("，之后重启 Docker 服务即可。")]),a._v(" "),s("h2",{attrs:{id:"容器相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器相关"}},[a._v("#")]),a._v(" 容器相关")]),a._v(" "),s("h3",{attrs:{id:"容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么"}},[a._v("#")]),a._v(" 容器退出后，通过 docker container ls 命令查看不到，数据会丢失么")]),a._v(" "),s("p",[a._v("答：容器退出后会处于终止（exited）状态，此时可以通过 "),s("code",[a._v("docker container ls -a")]),a._v(" 查看。其中的数据也不会丢失，还可以通过 "),s("code",[a._v("docker start")]),a._v(" 命令来启动它。只有删除掉容器才会清除所有数据。")]),a._v(" "),s("h3",{attrs:{id:"如何停止所有正在运行的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何停止所有正在运行的容器"}},[a._v("#")]),a._v(" 如何停止所有正在运行的容器")]),a._v(" "),s("p",[a._v("答：可以使用 "),s("code",[a._v("docker stop $(docker container ls -q)")]),a._v(" 命令。")]),a._v(" "),s("h3",{attrs:{id:"如何批量清理已经停止的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何批量清理已经停止的容器"}},[a._v("#")]),a._v(" 如何批量清理已经停止的容器")]),a._v(" "),s("p",[a._v("答：可以使用 "),s("code",[a._v("docker container prune")]),a._v(" 命令。")]),a._v(" "),s("h3",{attrs:{id:"如何获取某个容器的-pid-信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何获取某个容器的-pid-信息"}},[a._v("#")]),a._v(" 如何获取某个容器的 PID 信息")]),a._v(" "),s("p",[a._v("答：可以使用")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" inspect "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--format")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{{ .State.Pid }}'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("CONTAINER ID or NAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"如何获取某个容器的-ip-地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何获取某个容器的-ip-地址"}},[a._v("#")]),a._v(" 如何获取某个容器的 IP 地址")]),a._v(" "),s("p",[a._v("答：可以使用")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" inspect "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--format")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{{ .NetworkSettings.IPAddress }}'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("CONTAINER ID or NAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变"}},[a._v("#")]),a._v(" 如何给容器指定一个固定 IP 地址，而不是每次重启容器 IP 地址都会变")]),a._v(" "),s("p",[a._v("答：使用以下命令启动容器可以使容器 IP 固定不变")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" network create "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" bridge "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--subnet")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.25")]),a._v(".0.0/16 my-net\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--network")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my-net "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ip")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.25")]),a._v(".3.3 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-itd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my-container busybox\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"如何临时退出一个正在交互的容器的终端-而不终止它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何临时退出一个正在交互的容器的终端-而不终止它"}},[a._v("#")]),a._v(" 如何临时退出一个正在交互的容器的终端，而不终止它")]),a._v(" "),s("p",[a._v("答：按 "),s("code",[a._v("Ctrl-p Ctrl-q")]),a._v("。如果按 "),s("code",[a._v("Ctrl-c")]),a._v(" 往往会让容器内应用进程终止，进而会终止容器。")]),a._v(" "),s("h3",{attrs:{id:"使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx"}},[a._v("#")]),a._v(" 使用 "),s("code",[a._v("docker port")]),a._v(" 命令映射容器的端口时，系统报错“Error: No public port '80' published for xxx”")]),a._v(" "),s("p",[a._v("答：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("创建镜像时 "),s("code",[a._v("Dockerfile")]),a._v(" 要通过 "),s("code",[a._v("EXPOSE")]),a._v(" 指定正确的开放端口；")])]),a._v(" "),s("li",[s("p",[a._v("容器启动时指定 "),s("code",[a._v("PublishAllPort = true")]),a._v("。")])])]),a._v(" "),s("h3",{attrs:{id:"可以在一个容器中同时运行多个应用进程么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可以在一个容器中同时运行多个应用进程么"}},[a._v("#")]),a._v(" 可以在一个容器中同时运行多个应用进程么")]),a._v(" "),s("p",[a._v("答：一般并不推荐在同一个容器内运行多个应用进程。如果有类似需求，可以通过一些额外的进程管理机制，比如 "),s("code",[a._v("supervisord")]),a._v(" 来管理所运行的进程。可以参考 "),s("a",{attrs:{href:"https://docs.docker.com/config/containers/multi-service_container/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.docker.com/config/containers/multi-service_container/"),s("OutboundLink")],1),a._v(" 。")]),a._v(" "),s("h3",{attrs:{id:"如何控制容器占用系统资源-cpu、内存-的份额"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何控制容器占用系统资源-cpu、内存-的份额"}},[a._v("#")]),a._v(" 如何控制容器占用系统资源（CPU、内存）的份额")]),a._v(" "),s("p",[a._v("答：在使用 "),s("code",[a._v("docker create")]),a._v(" 命令创建容器或使用 "),s("code",[a._v("docker run")]),a._v(" 创建并启动容器的时候，可以使用 -c|--cpu-shares[=0] 参数来调整容器使用 CPU 的权重；使用 -m|--memory[=MEMORY] 参数来调整容器使用内存的大小。")]),a._v(" "),s("h2",{attrs:{id:"仓库相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#仓库相关"}},[a._v("#")]),a._v(" 仓库相关")]),a._v(" "),s("h3",{attrs:{id:"仓库-repository-、注册服务器-registry-、注册索引-index-有何关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#仓库-repository-、注册服务器-registry-、注册索引-index-有何关系"}},[a._v("#")]),a._v(" 仓库（Repository）、注册服务器（Registry）、注册索引（Index） 有何关系")]),a._v(" "),s("p",[a._v("首先，仓库是存放一组关联镜像的集合，比如同一个应用的不同版本的镜像。")]),a._v(" "),s("p",[a._v("注册服务器是存放实际的镜像文件的地方。注册索引则负责维护用户的账号、权限、搜索、标签等的管理。因此，注册服务器利用注册索引来实现认证等管理。")]),a._v(" "),s("h2",{attrs:{id:"配置相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置相关"}},[a._v("#")]),a._v(" 配置相关")]),a._v(" "),s("h3",{attrs:{id:"docker-的配置文件放在哪里-如何修改配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-的配置文件放在哪里-如何修改配置"}},[a._v("#")]),a._v(" Docker 的配置文件放在哪里，如何修改配置")]),a._v(" "),s("p",[a._v("答：使用 "),s("code",[a._v("systemd")]),a._v(" 的系统（如 Ubuntu 16.04、Centos 等）的配置文件在 "),s("code",[a._v("/etc/docker/daemon.json")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"如何更改-docker-的默认存储位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何更改-docker-的默认存储位置"}},[a._v("#")]),a._v(" 如何更改 Docker 的默认存储位置")]),a._v(" "),s("p",[a._v("答：Docker 的默认存储位置是 "),s("code",[a._v("/var/lib/docker")]),a._v("，如果希望将 Docker 的本地文件存储到其他分区，可以使用 Linux 软连接的方式来完成，或者在启动 daemon 时通过 "),s("code",[a._v("-g")]),a._v(" 参数指定，或者修改配置文件 "),s("code",[a._v("/etc/docker/daemon.json")]),a._v(' 的 "data-root" 项 。可以使用 '),s("code",[a._v('docker system info | grep "Root Dir"')]),a._v(" 查看当前使用的存储位置。")]),a._v(" "),s("p",[a._v("例如，如下操作将默认存储位置迁移到 /storage/docker。")]),a._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# df -h")]),a._v("\nFilesystem                    Size  Used Avail Use% Mounted on\n/dev/mapper/VolGroup-lv_root   50G  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(".3G   42G  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),a._v("% /\ntmpfs                          48G  228K   48G   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("% /dev/shm\n/dev/sda1                     485M   40M  420M   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v("% /boot\n/dev/mapper/VolGroup-lv_home  222G  188M  210G   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("% /home\n/dev/sdb2                     "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".7T  323G  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".3T  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),a._v("% /storage\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# service docker stop")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cd /var/lib/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# mv docker /storage/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ln -s /storage/docker/ docker")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ls -la docker")]),a._v("\nlrwxrwxrwx. "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" root root "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v("月 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),a._v(":43 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" -"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" /storage/docker\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@s26 lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# service docker start")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("h3",{attrs:{id:"使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded"}},[a._v("#")]),a._v(' 使用内存和 swap 限制启动容器时候报警告："WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded."')]),a._v(" "),s("p",[a._v("答：这是因为系统默认没有开启对内存和 swap 使用的统计功能，引入该功能会带来性能的下降。要开启该功能，可以采取如下操作：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("编辑 "),s("code",[a._v("/etc/default/grub")]),a._v(" 文件（Ubuntu 系统为例），配置 "),s("code",[a._v('GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"')])])]),a._v(" "),s("li",[s("p",[a._v("更新 grub："),s("code",[a._v("$ sudo update-grub")])])]),a._v(" "),s("li",[s("p",[a._v("重启系统，即可。")])])]),a._v(" "),s("h2",{attrs:{id:"docker-与虚拟化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-与虚拟化"}},[a._v("#")]),a._v(" Docker 与虚拟化")]),a._v(" "),s("h3",{attrs:{id:"docker-与-lxc-linux-container-有何不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-与-lxc-linux-container-有何不同"}},[a._v("#")]),a._v(" Docker 与 LXC（Linux Container）有何不同")]),a._v(" "),s("p",[a._v("答：LXC 利用 Linux 上相关技术实现了容器。Docker 则在如下的几个方面进行了改进：")]),a._v(" "),s("ul",[s("li",[a._v("移植性：通过抽象容器配置，容器可以实现从一个平台移植到另一个平台；")]),a._v(" "),s("li",[a._v("镜像系统：基于 OverlayFS 的镜像系统为容器的分发带来了很多的便利，同时共同的镜像层只需要存储一份，实现高效率的存储；")]),a._v(" "),s("li",[a._v("版本管理：类似于Git的版本管理理念，用户可以更方便的创建、管理镜像文件；")]),a._v(" "),s("li",[a._v("仓库系统：仓库系统大大降低了镜像的分发和管理的成本；")]),a._v(" "),s("li",[a._v("周边工具：各种现有工具（配置管理、云平台）对 Docker 的支持，以及基于 Docker的 PaaS、CI 等系统，让 Docker 的应用更加方便和多样化。")])]),a._v(" "),s("h3",{attrs:{id:"docker-与-vagrant-有何不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-与-vagrant-有何不同"}},[a._v("#")]),a._v(" Docker 与 Vagrant 有何不同")]),a._v(" "),s("p",[a._v("答：两者的定位完全不同。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Vagrant 类似 Boot2Docker（一款运行 Docker 的最小内核），是一套虚拟机的管理环境。Vagrant 可以在多种系统上和虚拟机软件中运行，可以在 Windows，Mac 等非 Linux 平台上为 Docker 提供支持，自身具有较好的包装性和移植性。")])]),a._v(" "),s("li",[s("p",[a._v("原生的 Docker 自身只能运行在 Linux 平台上，但启动和运行的性能都比虚拟机要快，往往更适合快速开发和部署应用的场景。")])])]),a._v(" "),s("p",[a._v("简单说：Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。")]),a._v(" "),s("h3",{attrs:{id:"开发环境中-docker-和-vagrant-该如何选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发环境中-docker-和-vagrant-该如何选择"}},[a._v("#")]),a._v(" 开发环境中 Docker 和 Vagrant 该如何选择")]),a._v(" "),s("p",[a._v("答：Docker 不是虚拟机，而是进程隔离，对于资源的消耗很少，但是目前需要 Linux 环境支持。Vagrant 是虚拟机上做的封装，虚拟机本身会消耗资源。")]),a._v(" "),s("p",[a._v("如果本地使用的 Linux 环境，推荐都使用 Docker。")]),a._v(" "),s("p",[a._v("如果本地使用的是 macOS 或者 Windows 环境，那就需要开虚拟机，单一开发环境下 Vagrant 更简单；多环境开发下推荐在 Vagrant 里面再使用 Docker 进行环境隔离。")]),a._v(" "),s("h2",{attrs:{id:"其它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[a._v("#")]),a._v(" 其它")]),a._v(" "),s("h3",{attrs:{id:"docker-能在非-linux-平台-比如-windows-或-macos-上运行么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-能在非-linux-平台-比如-windows-或-macos-上运行么"}},[a._v("#")]),a._v(" Docker 能在非 Linux 平台（比如 Windows 或 macOS ）上运行么")]),a._v(" "),s("p",[a._v("答：完全可以。安装方法请查看 "),s("RouterLink",{attrs:{to:"/stack/docker/install/windows.html"}},[a._v("安装 Docker")]),a._v(" 一节")],1),a._v(" "),s("h3",{attrs:{id:"如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机"}},[a._v("#")]),a._v(" 如何将一台宿主主机的 Docker 环境迁移到另外一台宿主主机")]),a._v(" "),s("p",[a._v("答：停止 Docker 服务。将整个 Docker 存储文件夹复制到另外一台宿主主机，然后调整另外一台宿主主机的配置即可。")]),a._v(" "),s("h3",{attrs:{id:"如何进入-docker-容器的网络命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何进入-docker-容器的网络命名空间"}},[a._v("#")]),a._v(" 如何进入 Docker 容器的网络命名空间")]),a._v(" "),s("p",[a._v("答：Docker 在创建容器后，删除了宿主主机上 "),s("code",[a._v("/var/run/netns")]),a._v(" 目录中的相关的网络命名空间文件。因此，在宿主主机上是无法看到或访问容器的网络命名空间的。")]),a._v(" "),s("p",[a._v("用户可以通过如下方法来手动恢复它。")]),a._v(" "),s("p",[a._v("首先，使用下面的命令查看容器进程信息，比如这里的 1234。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" inspect "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--format")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{{. State.Pid}} '")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$container_id")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("接下来，在 "),s("code",[a._v("/proc")]),a._v(" 目录下，把对应的网络命名空间文件链接到 "),s("code",[a._v("/var/run/netns")]),a._v(" 目录。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" /proc/1234/ns/net /var/run/netns/\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("然后，在宿主主机上就可以看到容器的网络命名空间信息。例如")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ip")]),a._v(" netns show\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("此时，用户可以通过正常的系统命令来查看或操作容器的命名空间了。例如修改容器的 IP 地址信息为 "),s("code",[a._v("172.17.0.100/16")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ip")]),a._v(" netns "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ifconfig")]),a._v(" eth0 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.17")]),a._v(".0.100/16\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"如何获取容器绑定到本地那个-veth-接口上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何获取容器绑定到本地那个-veth-接口上"}},[a._v("#")]),a._v(" 如何获取容器绑定到本地那个 veth 接口上")]),a._v(" "),s("p",[a._v("答：Docker 容器启动后，会通过 veth 接口对连接到本地网桥，veth 接口命名跟容器命名毫无关系，十分难以找到对应关系。")]),a._v(" "),s("p",[a._v("最简单的一种方式是通过查看接口的索引号，在容器中执行 "),s("code",[a._v("ip a")]),a._v(" 命令，查看到本地接口最前面的接口索引号，如 "),s("code",[a._v("205")]),a._v("，将此值加上 1，即 "),s("code",[a._v("206")]),a._v("，然后在本地主机执行 "),s("code",[a._v("ip a")]),a._v(" 命令，查找接口索引号为 "),s("code",[a._v("206")]),a._v(" 的接口，两者即为连接的 veth 接口对。")])])}),[],!1,null,null,null);s.default=e.exports}}]);